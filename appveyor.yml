version: '{branch}-{build}'

environment:
  CL: /MP
  generator: Visual Studio 16 2019
  ifw_location: C:\Qt\Tools\QtInstallerFramework\4.2
  iric_access_token:
    secure: WDcJrM7sx9jagk006F3OtXqomb90MlJcRIs8LoAyvT0wVzvG+UxeaW+oG9GWb1t8
  kskinoue0612_access_token:
    secure: GzdhhFKWjeLDM22U4ZcrMkAGEEnZLMVbfBR9W8uRQ/LqOtvX2qjPXvC3nvxxWeUc
  scharlton2_access_token:
    secure: CS9f7K3/ePypXUjKJ5S5iX2WFLNpC0IH4LEC9jYXdvcNbaM7CFl0fU5Ws/qUDgvo

# Skipping commits affecting specific files (GitHub only).
# also can use [skip appveyor] in message to skip building
skip_commits:
  files:
    - .gitignore
    - README.md
    - manuals/*
    - sdks/*
    - tools/*

image:
  - Visual Studio 2019

# called before clone
# Note that environment variables don't seem to transfer correctly from cmd to ps when
# they contain spaces
init:
  ## Sometimes the plaintext of secure variables is displayed so filter out access_tokens
  - ps: 'Get-ChildItem env: | Where-Object { $_.Name -NotMatch "access_token" }'
  # Only commit and push to master branch or debug-appveyor branch (for testing)
  - ps: $CommitAndPush = (($env:Configuration -eq "Release") -AND (($env:APPVEYOR_REPO_BRANCH -eq "master") -OR ($env:APPVEYOR_REPO_BRANCH -eq "develop_v4")) -AND (!$env:APPVEYOR_PULL_REQUEST_NUMBER))
  - ps: Write-Output $CommitAndPush
  - ps: |
      $releases_url="https://api.github.com/repos/i-RIC/iriclib_v4/releases"
      $latest_json = Invoke-WebRequest -Uri $releases_url/latest -Method GET -UseBasicParsing
      $latest = $latest_json.Content | ConvertFrom-Json
      $iriclib_rel = Get-Date $latest.created_at -Format "yyyy-MM-dd"
      Write-Output $iriclib_rel
      Write-Error "testing"
      throw "throw error"

configuration:
  - Debug
  - Release

matrix:
  fast_finish: true

# Note mkdir is from Git (C:\Program Files\Git\usr\bin\mkdir.exe)
# It might give unexpected results (use md instead)
before_build:
  - ps: if (! (Test-Path ${env:ifw_location}\bin\repogen.exe)) { throw "repogen.exe not found" }
  - call C:\Qt\5.14.2\msvc2017_64\bin\qtenv2.bat
  - call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat"
  - cd %APPVEYOR_BUILD_FOLDER%
  - curl -L -O https://github.com/i-RIC/iricdev-2019/archive/2019.zip
  - cd \
  - 7z x %APPVEYOR_BUILD_FOLDER%\2019.zip
  - del %APPVEYOR_BUILD_FOLDER%\2019.zip
  - ren c:\iricdev-2019-2019 iricdev-2019
  - cd \iricdev-2019
  - md lib
  - cd lib
  - ps: |
      (New-Object Net.WebClient).DownloadFile( `
        "https://ci.appveyor.com/api/projects/i-RIC/iricdev-2019/artifacts/lib/install.zip?branch=2019&job=Configuration:+Debug", `
        "\iricdev-2019\lib\install-Debug.zip")
      (New-Object Net.WebClient).DownloadFile( `
        "https://ci.appveyor.com/api/projects/i-RIC/iricdev-2019/artifacts/lib/install.zip?branch=2019&job=Configuration:+Release", `
        "\iricdev-2019\lib\install-Release.zip")
  - md install
  - cd install
  - 7z x -aoa ..\install-Debug.zip
  - 7z x -aoa ..\install-Release.zip
  - cd \iricdev-2019
  - call create-files.cmd
  - cd %APPVEYOR_BUILD_FOLDER%
  - if not exist libdlls (md libdlls)
  - if not exist libdlls\Debug (md libdlls\Debug)
  - if not exist libdlls\Release (md libdlls\Release)
  - copy /y \iricdev-2019\paths.pri .
  - copy /y \iricdev-2019\dirExt.prop .\tools\data\.
  - ps: 'Get-Command qmake'

build_script:
  - qmake -recursive -tp vc
  - msbuild /nologo /verbosity:minimal /maxCpuCount /target:iricGdPolyline /p:Configuration=%Configuration% src.sln
  - msbuild /nologo /verbosity:minimal /maxCpuCount /p:Configuration=%Configuration% src.sln

after_build:
  - cd %APPVEYOR_BUILD_FOLDER%\tools
  - set SAVE_PATH=%PATH%
  - set PATH=C:\Python37-x64;%PATH%
  - if "%APPVEYOR_BUILD_WORKER_IMAGE%"=="Visual Studio 2019" ( python copydllsExt-2019.py )
  - if "%APPVEYOR_BUILD_WORKER_IMAGE%"=="Visual Studio 2013" ( python copydllsExt.py )
  - python lrelease.py
  - set PATH=%SAVE_PATH%
  - cd %APPVEYOR_BUILD_FOLDER%
  - ps: |
      if ($CommitAndPush) {
        mkdir $env:APPVEYOR_BUILD_FOLDER\dist\_build
        Set-Location $env:APPVEYOR_BUILD_FOLDER\dist\_build -ErrorAction Stop
        cmake --version
        Get-Content C:\iricdev-2019\versions.cmd | ForEach-Object {
          if ($_ -match '^set IRICLIB_VER=(.*)$') {
            $env:iriclib_DIR="c:/iricdev-2019/lib/install/iriclib-" + $matches[1] + "/lib/cmake/iriclib"
          }
        }
        cmake -DPREPOST_GUI:PATH=$env:APPVEYOR_BUILD_FOLDER -DSRC_FOLDER:STRING=yasu_src -Diriclib_DIR:PATH=$env:iriclib_DIR -G $env:generator ..
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
      }

artifacts:
#  - path: libdlls\$(Configuration)
#    name: libdlls-$(Configuration)
#  - path: apps\iricgui\$(config)
#    name: iricgui-$(Configuration)

on_success:
  - ps: |
      if ($CommitAndPush) {
        # online_update urls
        $remote_url_iric = "https://github.com/i-RIC/online_update.git"
        $remote_url_scharlton2 = "https://github.com/scharlton2/online_update.git"
        $remote_url_kskinoue0612 = "https://github.com/kskinoue0612/online_update.git"

        $branch = $True
        if ($env:APPVEYOR_REPO_NAME -eq "i-RIC/prepost-gui") {
          $remote_url = $remote_url_iric
          $access_token = $env:iric_access_token
          $branch = $False
        }
        if ($env:APPVEYOR_REPO_NAME -eq "scharlton2/prepost-gui") {
          $remote_url = $remote_url_scharlton2
          # online_update_2020_05_17 expires after a year if not used
          $access_token = $env:scharlton2_access_token
        }
        if ($env:APPVEYOR_REPO_NAME -eq "kskinoue0612/prepost-gui") {
          $remote_url = $remote_url_kskinoue0612
          $access_token = $env:kskinoue0612_access_token
        }

        Set-Location \ -ErrorAction Stop
        git clone -q --branch=master --depth 1 $remote_url online_update 2>&1 | Out-Null
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        Set-Location .\online_update -ErrorAction Stop

        if ($branch) {
          # create branch when remote is not "i-RIC/prepost-gui"
          git checkout -qb $env:APPVEYOR_JOB_ID
          if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
        }

        # update data\definition.xml and meta\package.xml from yasu_src\packages\gui.prepost

        # set properties
        $v=(Select-String -Path yasu_src\packages\gui.prepost\meta\package.xml -Pattern "(?<=<Version>)(.*)(?=</Version>)").Matches.Value -split "\."
        $v[3] = 1 + $v[3]
        $env:VERSION = $v -join "."
        $tokyo_tz = [System.TimeZoneInfo]::FindSystemTimeZoneById("Tokyo Standard Time")
        $tokyo_date = [System.TimeZoneInfo]::ConvertTimeFromUtc((Get-Date).ToUniversalTime(), $tokyo_tz)
        $env:RELEASE_DATE = $(Get-Date $tokyo_date -Format s).Substring(0,10)
        $env:RELEASE = $env:RELEASE_DATE -replace '-', '.'
        $env:CAPTION = "iRIC GUI " + $v[0] + "." + $v[1] + "." + $v[2]

        # The parentheses around the Get-Content commands below are required
        # to avoid file access errors

        $files=@('yasu_src\packages\gui.prepost\data\definition.xml', `
                'yasu_src\packages\gui.prepost\meta\package.xml')
        foreach ($file in $files) {
          (Get-Content $file) | Foreach-Object {
            $_ -replace "(?<=<Version>)(.*)(?=</Version>)",           "$env:VERSION" `
               -replace "`" version=`"([^`"]*)`"",                    "`" version=`"$env:VERSION`"" `
               -replace "(?<=<ReleaseDate>)(.*)(?=</ReleaseDate>)",   "$env:RELEASE_DATE" `
               -replace "release=`"([^`"]*)`"",                       "release=`"$env:RELEASE`"" `
               -replace "github-sha1=`"([^`"]*)`"",                   "github-sha1=`"$env:APPVEYOR_REPO_COMMIT`""
          } | Set-Content $file
        }

        # distribute files built by prepost-gui
        cmake --build $env:APPVEYOR_BUILD_FOLDER\dist\_build --config release --target install
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        # read iriclib Version from $in
        # get iriclib ReleaseDate from github releases
        #   see https://docs.github.com/en/rest/reference/releases#get-the-latest-release
        # and write them both to $out
        $in = 'yasu_src\packages\sdk\data\c\lib\cmake\iriclib\iriclibConfigVersion.cmake'
        $out = 'yasu_src\packages\sdk\meta\package.xml'
        $iriclib_ver = (Select-String -Path $in -Pattern '^set\(PACKAGE_VERSION "(?<ver>.*)"\)$').Matches[0].Groups['ver'].Value
        $releases_url="https://api.github.com/repos/i-RIC/iriclib_v4/releases"
        $latest_json = Invoke-WebRequest -Uri $releases_url/latest -Method GET
        $latest = $latest_json.Content | ConvertFrom-Json
        $iriclib_rel = ($latest.created_at).ToString("yyyy-MM-dd")
        # verify versions agree
        if ($latest.tag_name -ne "v$iriclib_ver") {
          throw "iriclib version/release mismatch " + $latest.tag_name  + " -ne " + "v$iriclib_ver"
        }
        (Get-Content $out) | Foreach-Object {
          $_ -replace "(?<=<Version>)(.*)(?=</Version>)",           $iriclib_ver `
             -replace "(?<=<ReleaseDate>)(.*)(?=</ReleaseDate>)",   $iriclib_rel
        } | Set-Content $out

        # run repogen to build packages and Updates.xml
        Set-Location \online_update\yasu_src -ErrorAction Stop
        # run repogen
        & ${env:ifw_location}\bin\repogen.exe -p packages --update --include gui.prepost,miniconda,sdk ..\yasu
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        # run normalize_updatexml.py to normalize Updates.xml.
        Set-Location \online_update -ErrorAction Stop
        py normalize_updatexml.py
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        # commit and push to https://github.com/i-RIC/online_update.git
        git config --global credential.helper store
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        # configure git for commit and push
        Add-Content "$HOME\.git-credentials" "https://$($access_token):x-oauth-basic@github.com`n" -ErrorAction Stop
        git config --global user.email "iric.appveyor@gmail.com"
        git config --global user.name "iric.appveyor"
        git config --global core.safecrlf false
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        # git add -A *.7z *.sha1 *.xml *.dll *.exe *.qm
        git add -A
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        # Qt dictionaries are now included in gui.runtime package.
        git reset **/qt_*.qm
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        git commit -m "built by iric.appveyor $env:APPVEYOR_BUILD_VERSION"
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        if ($branch) {
          git push --set-upstream origin $env:APPVEYOR_JOB_ID 2>&1 | Out-Null
        } else {
          git push --set-upstream origin master 2>&1 | Out-Null
        }
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        git status
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
      }

on_failure:
  - dir C:\Qt\Tools\QtInstallerFramework\
