version: '{branch}-{build}'

environment:
  CL: /MP
  generator: Visual Studio 16 2019
  ifw_location: C:\Qt\Tools\QtInstallerFramework\4.3
  iric_access_token:
    secure: WDcJrM7sx9jagk006F3OtXqomb90MlJcRIs8LoAyvT0wVzvG+UxeaW+oG9GWb1t8
  kskinoue0612_access_token:
    secure: GzdhhFKWjeLDM22U4ZcrMkAGEEnZLMVbfBR9W8uRQ/LqOtvX2qjPXvC3nvxxWeUc
  scharlton2_access_token:
    secure: 3mXPZnI89IUSgBnFS4uVNiz69PVY7KG4jw+wPTj0ubg9iAjjw9oKacWVZvoxulyy
  iric_json:
    secure: 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
  kskinoue0612_json:
    secure: todo
  scharlton2_json:
    secure: 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


# Skipping commits affecting specific files (GitHub only).
# also can use [skip appveyor] in message to skip building
skip_commits:
  files:
    - .gitignore
    - README.md
    - manuals/*
    - sdks/*
    - tools/*

image:
  - Visual Studio 2019

# called before clone
# Note that environment variables don't seem to transfer correctly from cmd to ps when
# they contain spaces
#
# Neither env nor powershell variables are passed when using pwsh. Now $CommitAndPush
# must be re-evaluated everytime.  env vars CAN be passed from ps: to pwsh: but not the
# other way around (see develop_v4-363)
init:
  - ps: |
      if ($env:iric_json) { echo ($env:iric_json).Length }
      ($env:iric_json).Split(";")[0..1]
      # Sometimes the plaintext of secure variables is displayed so filter out secure vars
      Get-ChildItem env: | Where-Object { $_.Name -NotMatch "access_token" -and $_.Name -notmatch 'json'}
      # Only commit and push to master branch or debug-appveyor branch (for testing)
      $CommitAndPush = ( ($env:Configuration -eq "Release") -AND ($env:APPVEYOR_REPO_BRANCH -eq "develop_v4") -AND (!$env:APPVEYOR_PULL_REQUEST_NUMBER) )
      $env:CommitAndPush = $CommitAndPush
  - pwsh: |
      if ($env:iric_json) { echo ($env:iric_json).Length }
      ($env:iric_json).Split(";")[0..1]

configuration:
  - Debug
  - Release

matrix:
  fast_finish: true

# Note mkdir is from Git (C:\Program Files\Git\usr\bin\mkdir.exe)
# It might give unexpected results (use md instead)
#
# Neither env nor powershell variables are passed when using pwsh shell
before_build:
  - pwsh: |
      ####################################################################################
      # It's easier to create the json file in pswh.
      # json env vars contain encrypted contents of iric-ts-translation-4761fe6f85d6.json
      # with newlines replaced by semicolons(;)
      ####################################################################################
      $topdir = Get-Location
      $creds = $env:iric_json
      if ($env:APPVEYOR_REPO_NAME -eq "scharlton2/prepost-gui") {
        $creds = $env:scharlton2_json
      }
      if ($env:APPVEYOR_REPO_NAME -eq "kskinoue0612/prepost-gui") {
        $creds = $env:kskinoue0612_json
      }
      Write-Output $creds.Replace(";", "`r`n") > .\iric-ts-translation-4761fe6f85d6.json
      Write-Output "Should be EE6EA1115B3C696A88BA2F1E89BD6F88C8E50DE2E7D25B21488F5B4BAFCCD205"
      Get-FileHash "$topdir\iric-ts-translation-4761fe6f85d6.json"
  - pwsh: |
      ####################################################################################
      # Run tools\translate_ts.py on all but the top languages directories
      ####################################################################################
      if ($env:Configuration -eq "Release") {
        $topdir = Get-Location
        $env:GOOGLE_APPLICATION_CREDENTIALS = "$topdir\iric-ts-translation-4761fe6f85d6.json"
        Write-Output "Should be EE6EA1115B3C696A88BA2F1E89BD6F88C8E50DE2E7D25B21488F5B4BAFCCD205"
        Get-FileHash $env:GOOGLE_APPLICATION_CREDENTIALS

        python -m pip install --upgrade pip
        pip install google-cloud-translate

        $dirs = Get-ChildItem -Attributes Directory | Where-Object { $_.Name -notmatch 'languages' }
        foreach ($dir in $dirs) {
          $langs = Get-ChildItem -Recurse -Attributes Directory $dir | Where-Object { $_.Name -like 'languages' }
          foreach ($lang in $langs) {
              Set-Location $lang.Parent
              mkdir output
              Rename-Item .\languages .\input
              python "$topdir\tools\translate_ts.py"
              Rename-Item .\output .\languages
              Remove-Item -Recurse -Force .\input
          }
        }
        Set-Location $topdir
        rm .\iric-ts-translation-4761fe6f85d6.json
        git status
      }
  - ps: |
      ####################################################################################
      # Commit the languages changes
      # from https://www.appveyor.com/docs/how-to/git-push/
      ####################################################################################
      if ($env:Configuration -eq "Release") {
        # determine whether to push to current or new branch and which
        # access_token to use (the branch is for testing)
        $branch = $True
        if ($env:APPVEYOR_REPO_NAME -eq "i-RIC/prepost-gui") {
          $access_token = $env:iric_access_token
          if ( ($env:APPVEYOR_REPO_BRANCH -eq "develop_v4") -AND (!$env:APPVEYOR_PULL_REQUEST_NUMBER) ) {
            $branch = $False
          }
        }
        if ($env:APPVEYOR_REPO_NAME -eq "scharlton2/prepost-gui") {
          # online_update_2020_05_17 expires after a year if not used
          $access_token = $env:scharlton2_access_token
        }
        if ($env:APPVEYOR_REPO_NAME -eq "kskinoue0612/prepost-gui") {
          $access_token = $env:kskinoue0612_access_token
        }

        # Enabling Git credential store
        git config --global credential.helper store
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        # Adding access token to credential store
        Add-Content "$HOME\.git-credentials" "https://$($access_token):x-oauth-basic@github.com`n" -ErrorAction Stop

        # Indicate git user name and mail
        git config --global user.email "iric.appveyor@gmail.com"
        git config --global user.name "iric.appveyor"
        git config --global core.safecrlf false
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        # Create branch if necessary
        if ($branch) {
          # create branch
          git switch --quiet -c "__$env:APPVEYOR_BUILD_VERSION"
          if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
        }        

        # add and commit language files (shouldn't be any new files)
        git commit -am "[skip ci] translate_ts.py by iric.appveyor $env:APPVEYOR_BUILD_VERSION"
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        # push
        if ($branch) {
          git push --set-upstream origin "__$env:APPVEYOR_BUILD_VERSION" 2>&1 | Out-Null
        } else {
          git push --set-upstream origin $env:APPVEYOR_REPO_BRANCH 2>&1 | Out-Null
        }
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
      }
      # These lines are necessary to avoid appveyor considering the output
      # from git push to be an error
      Write-Output "Status:"
      git status
  - ps: if (! (Test-Path ${env:ifw_location}\bin\repogen.exe)) { throw "repogen.exe not found" }
  - call C:\Qt\5.14.2\msvc2017_64\bin\qtenv2.bat
  - call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat"
  - cd %APPVEYOR_BUILD_FOLDER%
  - curl -L -O https://github.com/i-RIC/iricdev-2019/archive/2019.zip
  - cd \
  - 7z x %APPVEYOR_BUILD_FOLDER%\2019.zip
  - del %APPVEYOR_BUILD_FOLDER%\2019.zip
  - ren c:\iricdev-2019-2019 iricdev-2019
  - cd \iricdev-2019
  - ps: |
      $releases_url = "https://api.github.com/repos/i-RIC/iricdev-2019/releases"
      $latest_response = Invoke-WebRequest -Uri $releases_url/latest -Method GET -UseBasicParsing
      $latest = $latest_response.Content | ConvertFrom-Json
      $url = $latest.assets.browser_download_url
      (New-Object Net.WebClient).DownloadFile($url, "\iricdev-2019\install.7z")
      7z x install.7z
      rm install.7z
  - call create-files.cmd
  - cd %APPVEYOR_BUILD_FOLDER%
  - if not exist libdlls (md libdlls)
  - if not exist libdlls\Debug (md libdlls\Debug)
  - if not exist libdlls\Release (md libdlls\Release)
  - copy /y \iricdev-2019\paths.pri .
  - copy /y \iricdev-2019\dirExt.prop .\tools\data\.
  - ps: 'Get-Command qmake'

build_script:
  - qmake -recursive -tp vc
  - msbuild /nologo /verbosity:minimal /maxCpuCount /target:iricGdPolyline /p:Configuration=%Configuration% src.sln
  - msbuild /nologo /verbosity:minimal /maxCpuCount /p:Configuration=%Configuration% src.sln

after_build:
  - cd %APPVEYOR_BUILD_FOLDER%\tools
  - set SAVE_PATH=%PATH%
  - set PATH=C:\Python37-x64;%PATH%
  - if "%APPVEYOR_BUILD_WORKER_IMAGE%"=="Visual Studio 2019" ( python copydllsExt-2019.py )
  - if "%APPVEYOR_BUILD_WORKER_IMAGE%"=="Visual Studio 2013" ( python copydllsExt.py )
  - python lrelease.py
  - set PATH=%SAVE_PATH%
  - cd %APPVEYOR_BUILD_FOLDER%
  - ps: |
      if ($CommitAndPush) {
        mkdir $env:APPVEYOR_BUILD_FOLDER\dist\_build
        Set-Location $env:APPVEYOR_BUILD_FOLDER\dist\_build -ErrorAction Stop
        cmake --version
        Get-Content C:\iricdev-2019\versions.cmd | ForEach-Object {
          if ($_ -match '^set IRICLIB_VER=(.*)$') {
            $env:iriclib_DIR="c:/iricdev-2019/lib/install/iriclib-" + $matches[1] + "/lib/cmake/iriclib"
          }
        }
        cmake -DPREPOST_GUI:PATH=$env:APPVEYOR_BUILD_FOLDER -DSRC_FOLDER:STRING=yasu_src -Diriclib_DIR:PATH=$env:iriclib_DIR -G $env:generator ..
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
      }

artifacts:
#  - path: libdlls\$(Configuration)
#    name: libdlls-$(Configuration)
#  - path: apps\iricgui\$(config)
#    name: iricgui-$(Configuration)

on_success:
  - ps: |
      if ($CommitAndPush) {
        # online_update urls
        $remote_url_iric = "https://github.com/i-RIC/online_update.git"
        $remote_url_scharlton2 = "https://github.com/scharlton2/online_update.git"
        $remote_url_kskinoue0612 = "https://github.com/kskinoue0612/online_update.git"

        $branch = $True
        if ($env:APPVEYOR_REPO_NAME -eq "i-RIC/prepost-gui") {
          $remote_url = $remote_url_iric
          $access_token = $env:iric_access_token
          $branch = $False
        }
        if ($env:APPVEYOR_REPO_NAME -eq "scharlton2/prepost-gui") {
          $remote_url = $remote_url_scharlton2
          # online_update_2020_05_17 expires after a year if not used
          $access_token = $env:scharlton2_access_token
        }
        if ($env:APPVEYOR_REPO_NAME -eq "kskinoue0612/prepost-gui") {
          $remote_url = $remote_url_kskinoue0612
          $access_token = $env:kskinoue0612_access_token
        }

        Set-Location \ -ErrorAction Stop
        git clone -q --branch=master --depth 1 $remote_url online_update 2>&1 | Out-Null
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        Set-Location .\online_update -ErrorAction Stop

        if ($branch) {
          # create branch when remote is not "i-RIC/prepost-gui"
          git checkout -qb $env:APPVEYOR_JOB_ID
          if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
        }

        # update data\definition.xml and meta\package.xml from yasu_src\packages\gui.prepost

        # set properties
        $v=(Select-String -Path yasu_src\packages\gui.prepost\meta\package.xml -Pattern "(?<=<Version>)(.*)(?=</Version>)").Matches.Value -split "\."
        $v[3] = 1 + $v[3]
        $env:VERSION = $v -join "."
        $tokyo_tz = [System.TimeZoneInfo]::FindSystemTimeZoneById("Tokyo Standard Time")
        $tokyo_date = [System.TimeZoneInfo]::ConvertTimeFromUtc((Get-Date).ToUniversalTime(), $tokyo_tz)
        $env:RELEASE_DATE = $(Get-Date $tokyo_date -Format s).Substring(0,10)
        $env:RELEASE = $env:RELEASE_DATE -replace '-', '.'
        $env:CAPTION = "iRIC GUI " + $v[0] + "." + $v[1] + "." + $v[2]

        # The parentheses around the Get-Content commands below are required
        # to avoid file access errors

        $files=@('yasu_src\packages\gui.prepost\data\definition.xml', `
                'yasu_src\packages\gui.prepost\meta\package.xml')
        foreach ($file in $files) {
          (Get-Content $file) | Foreach-Object {
            $_ -replace "(?<=<Version>)(.*)(?=</Version>)",           "$env:VERSION" `
               -replace "`" version=`"([^`"]*)`"",                    "`" version=`"$env:VERSION`"" `
               -replace "(?<=<ReleaseDate>)(.*)(?=</ReleaseDate>)",   "$env:RELEASE_DATE" `
               -replace "release=`"([^`"]*)`"",                       "release=`"$env:RELEASE`"" `
               -replace "github-sha1=`"([^`"]*)`"",                   "github-sha1=`"$env:APPVEYOR_REPO_COMMIT`""
          } | Set-Content $file
        }

        # distribute files built by prepost-gui
        cmake --build $env:APPVEYOR_BUILD_FOLDER\dist\_build --config release --target install
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        # read iriclib Version from $in
        # get iriclib ReleaseDate from github releases
        #   see https://docs.github.com/en/rest/reference/releases#get-the-latest-release
        # and write them both to $out
        $in = 'yasu_src\packages\sdk\data\c\lib\cmake\iriclib\iriclibConfigVersion.cmake'
        $outs=@('yasu_src\packages\sdk\meta\package.xml', `
                'yasu_src\packages\miniconda\meta\package.xml')
        $iriclib_ver = (Select-String -Path $in -Pattern '^set\(PACKAGE_VERSION "(?<ver>.*)"\)$').Matches[0].Groups['ver'].Value
        $releases_url="https://api.github.com/repos/i-RIC/iriclib_v4/releases"
        $latest_json = Invoke-WebRequest -Uri $releases_url/latest -Method GET -UseBasicParsing
        $latest = $latest_json.Content | ConvertFrom-Json
        $iriclib_rel = Get-Date $latest.created_at -Format "yyyy-MM-dd"
        # verify versions agree
        if ($latest.tag_name -ne "v$iriclib_ver") {
          throw "iriclib version/release mismatch " + $latest.tag_name  + " -ne " + "v$iriclib_ver"
        }
        foreach ($out in $outs) {
          (Get-Content $out) | Foreach-Object {
            $_ -replace "(?<=<Version>)(.*)(?=</Version>)",           $iriclib_ver `
               -replace "(?<=<ReleaseDate>)(.*)(?=</ReleaseDate>)",   $iriclib_rel
          } | Set-Content $out
        }

        # run repogen to build packages and Updates.xml
        Set-Location \online_update\yasu_src -ErrorAction Stop
        # run repogen
        & ${env:ifw_location}\bin\repogen.exe -p packages --update --include gui.prepost,miniconda,sdk ..\yasu
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        # run normalize_updatexml.py to normalize Updates.xml.
        Set-Location \online_update -ErrorAction Stop
        py normalize_updatexml.py
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        # commit and push to https://github.com/i-RIC/online_update.git
        git config --global credential.helper store
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        # configure git for commit and push
        Add-Content "$HOME\.git-credentials" "https://$($access_token):x-oauth-basic@github.com`n" -ErrorAction Stop
        git config --global user.email "iric.appveyor@gmail.com"
        git config --global user.name "iric.appveyor"
        git config --global core.safecrlf false
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        # git add -A *.7z *.sha1 *.xml *.dll *.exe *.qm
        git add -A
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        # Qt dictionaries are now included in gui.runtime package.
        git reset **/qt_*.qm
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        git commit -m "built by iric.appveyor $env:APPVEYOR_BUILD_VERSION"
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        if ($branch) {
          git push --set-upstream origin $env:APPVEYOR_JOB_ID 2>&1 | Out-Null
        } else {
          git push --set-upstream origin master 2>&1 | Out-Null
        }
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

        git status
        if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
      }

on_failure:
  - dir C:\Qt\Tools\QtInstallerFramework
  # the following doesn't work (never finishes):
  # - ps: |
  #     Get-ChildItem -Recurse c:\ | 7z a -si $env:APPVEYOR_BUILD_FOLDER\dir_c.7z
  #     Push-AppveyorArtifact $env:APPVEYOR_BUILD_FOLDER\dir_c.7z
  #     Write-Output "Finished on_failure"
